package com.proyect.ds6.ui.admin

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.ExposedDropdownMenuDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusDirection
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.proyect.ds6.R
import com.proyect.ds6.data.repository.EmployeeRepository
import com.proyect.ds6.db.supabase
import com.proyect.ds6.model.Cargo
import com.proyect.ds6.model.Departamento
import com.proyect.ds6.ui.theme.DS6InteractiveElement
import com.proyect.ds6.ui.theme.DS6Theme
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddWorkScreen(
    onBackClick: () -> Unit = {},
    onSaveUser: (String, String, String) -> Unit = { _, _, _ -> }
) {
    // Estados para los campos del formulario
    var selectedDepartamento by remember { mutableStateOf<Departamento?>(null) }
    var nombreCargo by remember { mutableStateOf("") }
    var nextCargoCode by remember { mutableStateOf("") }
    var isCargoCodeGenerated by remember { mutableStateOf(false) }
    
    // Estado para controlar la expansión del menú desplegable
    var isExpanded by remember { mutableStateOf(false) }
    
    // Estados para manejar la carga de datos
    var isLoading by remember { mutableStateOf(true) }
    var errorMessage by remember { mutableStateOf<String?>(null) }
    
    // Lista de departamentos obtenidos de la base de datos
    var departamentos by remember { mutableStateOf<List<Departamento>>(emptyList()) }
    var cargos by remember { mutableStateOf<List<Cargo>>(emptyList()) }
    
    // Para manejar el foco entre campos
    val focusManager = LocalFocusManager.current
    val coroutineScope = rememberCoroutineScope()
    val employeeRepository = remember { EmployeeRepository(supabase) }

    // Cargar departamentos y cargos al iniciar
    LaunchedEffect(key1 = Unit) {
        coroutineScope.launch {
            try {
                isLoading = true
                
                // Cargar departamentos
                val depResult = withContext(Dispatchers.IO) {
                    employeeRepository.getDepartamentos()
                }
                
                if (depResult.isSuccess) {
                    departamentos = depResult.getOrNull() ?: emptyList()
                } else {
                    errorMessage = "Error al cargar departamentos: ${depResult.exceptionOrNull()?.message}"
                }
                
                // Cargar cargos existentes
                val cargosResult = withContext(Dispatchers.IO) {
                    employeeRepository.getCargos()
                }
                
                if (cargosResult.isSuccess) {
                    cargos = cargosResult.getOrNull() ?: emptyList()
                } else {
                    errorMessage = "Error al cargar cargos: ${cargosResult.exceptionOrNull()?.message}"
                }
                
            } catch (e: Exception) {
                errorMessage = "Error inesperado: ${e.message}"
            } finally {
                isLoading = false
            }
        }
    }
    
    // Generar código de cargo cuando se selecciona un departamento
    LaunchedEffect(selectedDepartamento) {
        if (selectedDepartamento != null) {
            // Filtrar cargos para el departamento seleccionado
            val cargosFiltrados = cargos.filter { it.dep_codigo == selectedDepartamento?.codigo }
            
            // Calcular el siguiente código secuencial para este departamento
            nextCargoCode = calculateNextCargoCode(selectedDepartamento!!.codigo, cargosFiltrados)
            isCargoCodeGenerated = true
        } else {
            nextCargoCode = ""
            isCargoCodeGenerated = false
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        "Agregar Puesto de Trabajo", 
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center
                    ) 
                },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Volver"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                )
            )
        },
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Espaciador superior
            androidx.compose.foundation.layout.Spacer(modifier = Modifier.padding(top = 16.dp))
            
            if (isLoading) {
                CircularProgressIndicator(modifier = Modifier.padding(16.dp))
            } else {
                // Campo desplegable de Departamento
                ExposedDropdownMenuBox(
                    expanded = isExpanded,
                    onExpandedChange = { isExpanded = it },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    OutlinedTextField(
                        value = selectedDepartamento?.nombre ?: "",
                        onValueChange = {},
                        readOnly = true,
                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = isExpanded) },
                        leadingIcon = { 
                            Icon(
                                imageVector = ImageVector.vectorResource(id = R.drawable.apartment_24px),
                                contentDescription = "Ícono de Departamento",
                                tint = DS6InteractiveElement
                            )
                        },
                        label = { Text("Departamento") },
                        colors = ExposedDropdownMenuDefaults.outlinedTextFieldColors(),
                        modifier = Modifier
                            .menuAnchor()
                            .fillMaxWidth()
                    )
                    
                    ExposedDropdownMenu(
                        expanded = isExpanded,
                        onDismissRequest = { isExpanded = false }
                    ) {
                        departamentos.forEach { departamento ->
                            DropdownMenuItem(
                                text = { Text(departamento.nombre ?: "Sin nombre") },
                                onClick = {
                                    selectedDepartamento = departamento
                                    isExpanded = false
                                    focusManager.moveFocus(FocusDirection.Down)
                                }
                            )
                        }
                    }
                }

                // Campo de nombre de cargo
                OutlinedTextField(
                    value = nombreCargo,
                    onValueChange = { nombreCargo = it },
                    label = { Text("Nombre del Cargo") },
                    leadingIcon = { 
                        Icon(
                            imageVector = ImageVector.vectorResource(id = R.drawable.badge_24px),
                            contentDescription = "Ícono de Cargo",
                            tint = DS6InteractiveElement
                        )
                    },
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Text,
                        imeAction = ImeAction.Done
                    ),
                    keyboardActions = KeyboardActions(
                        onDone = { focusManager.clearFocus() }
                    ),
                    modifier = Modifier.fillMaxWidth()
                )
                
                // Mostrar mensaje de error si existe
                errorMessage?.let {
                    Text(
                        text = it,
                        color = MaterialTheme.colorScheme.error,
                        style = MaterialTheme.typography.bodySmall,
                        modifier = Modifier.padding(top = 4.dp)
                    )
                }
            }
            
            // Espaciador
            androidx.compose.foundation.layout.Spacer(modifier = Modifier.weight(1f))
            
            // Botón para guardar (arriba)
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(2.dp)
            ) {
                Button(
                    onClick = { 
                        if (selectedDepartamento != null) {
                            onSaveUser(
                                nextCargoCode,  // Código completo del cargo
                                selectedDepartamento!!.codigo,  // Código del departamento
                                nombreCargo  // Nombre del cargo
                            )
                            // Limpiamos los campos después de guardar
                            selectedDepartamento = null
                            nombreCargo = ""
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 8.dp),
                    enabled = selectedDepartamento != null && nombreCargo.isNotEmpty() && !isLoading
                ) {
                    if (isLoading) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(24.dp),
                            color = MaterialTheme.colorScheme.onPrimary,
                            strokeWidth = 2.dp
                        )
                    } else {
                        Text("Guardar")
                    }
                }
                
                // Botón de cancelar (abajo)
                OutlinedButton(
                    onClick = onBackClick,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Cancelar")
                }
            }
        }
    }
}

/**
 * Calcula el siguiente código de cargo basado en los cargos existentes para un departamento.
 * El formato del código será "DEPXX" donde DEP es el código del departamento y XX es un número secuencial.
 */
private fun calculateNextCargoCode(depCodigo: String, cargos: List<Cargo>): String {
    // Si no hay cargos para este departamento, empezar con 01
    if (cargos.isEmpty()) {
        return "${depCodigo}01"
    }
    
    // Extraer los números del final de los códigos
    val existingNumbers = cargos.mapNotNull { cargo ->
        // Verificar si el código comienza con el código de departamento
        if (cargo.codigo.startsWith(depCodigo)) {
            val numeroStr = cargo.codigo.substring(depCodigo.length)
            numeroStr.toIntOrNull()
        } else {
            null
        }
    }
    
    // Encontrar el número más alto
    val highestNumber = existingNumbers.maxOrNull() ?: 0
    
    // Incrementar y formatear con ceros a la izquierda
    val nextNumber = highestNumber + 1
    val formattedNumber = String.format("%02d", nextNumber)
    
    // Retornar el código completo sin guión
    return "$depCodigo$formattedNumber"
}

@Preview(showBackground = true)
@Composable
fun AddWorkScreenPreview() {
    DS6Theme {
        AddWorkScreen()
    }
}